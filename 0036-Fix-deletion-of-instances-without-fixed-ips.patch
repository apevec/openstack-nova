From a1a3cb1dcb19fb21bc30755ce4afc30e0c9a6799 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Asbj=C3=B8rn=20Sannes?= <asbjorn.sannes@interhost.no>
Date: Wed, 19 Oct 2011 22:36:03 +0200
Subject: [PATCH] Fix deletion of instances without fixed ips.

Catch exception when there are no fixed ips for an instance when deallocating it.

When trying to delete failed builds I got the following traces:

(nova.rpc): TRACE: Traceback (most recent call last):
(nova.rpc): TRACE:   File "/usr/lib64/python2.7/site-packages/nova/rpc/impl_kombu.py", line 620, in _process_data
(nova.rpc): TRACE:     rval = node_func(context=ctxt, **node_args)
(nova.rpc): TRACE:   File "/usr/lib64/python2.7/site-packages/nova/network/manager.py", line 252, in deallocate_for_instance
(nova.rpc): TRACE:     fixed_ips = self.db.fixed_ip_get_by_instance(context, instance_id)
(nova.rpc): TRACE:   File "/usr/lib64/python2.7/site-packages/nova/db/api.py", line 392, in fixed_ip_get_by_instance
(nova.rpc): TRACE:     return IMPL.fixed_ip_get_by_instance(context, instance_id)
(nova.rpc): TRACE:   File "/usr/lib64/python2.7/site-packages/nova/db/sqlalchemy/api.py", line 120, in wrapper
(nova.rpc): TRACE:     return f(*args, **kwargs)
(nova.rpc): TRACE:   File "/usr/lib64/python2.7/site-packages/nova/db/sqlalchemy/api.py", line 877, in fixed_ip_get_by_instance
(nova.rpc): TRACE:     raise exception.FixedIpNotFoundForInstance(instance_id=instance_id)
(nova.rpc): TRACE: FixedIpNotFoundForInstance: Instance 37 has zero fixed ips.

Which this commit fixes.

Added myself to Authors as requested.

(cherry picked from commit 636c70c3c990d0405c7e05a428d78908dc8b4317)

Change-Id: I87a1764c16328c6a4bfa5a0bfab1ea4800cbb355
---
 Authors                    |    1 +
 nova/network/manager.py    |    5 ++++-
 nova/tests/test_network.py |   27 +++++++++++++++++++++++++++
 3 files changed, 32 insertions(+), 1 deletions(-)

diff --git a/Authors b/Authors
index cedd199..03aedc2 100644
--- a/Authors
+++ b/Authors
@@ -12,6 +12,7 @@ Anthony Young <sleepsonthefloor@gmail.com>
 Antony Messerli <ant@openstack.org>
 Armando Migliaccio <Armando.Migliaccio@eu.citrix.com>
 Arvind Somya <asomya@cisco.com>
+Asbj√∏rn Sannes <asbjorn.sannes@interhost.no>
 Bilal Akhtar <bilalakhtar@ubuntu.com>
 Brad Hall <brad@nicira.com>
 Brad McConnell <bmcconne@rackspace.com>
diff --git a/nova/network/manager.py b/nova/network/manager.py
index d8de396..ef3dbd6 100644
--- a/nova/network/manager.py
+++ b/nova/network/manager.py
@@ -250,7 +250,10 @@ class FloatingIP(object):
         LOG.debug(_("floating IP deallocation for instance |%s|"), instance_id,
                                                                context=context)
 
-        fixed_ips = self.db.fixed_ip_get_by_instance(context, instance_id)
+        try:
+            fixed_ips = self.db.fixed_ip_get_by_instance(context, instance_id)
+        except exception.FixedIpNotFoundForInstance:
+            fixed_ips = []
         # add to kwargs so we can pass to super to save a db lookup there
         kwargs['fixed_ips'] = fixed_ips
         for fixed_ip in fixed_ips:
diff --git a/nova/tests/test_network.py b/nova/tests/test_network.py
index 844aba2..40efd4f 100644
--- a/nova/tests/test_network.py
+++ b/nova/tests/test_network.py
@@ -718,3 +718,30 @@ class CommonNetworkTestCase(test.TestCase):
         args = [None, 'foo', cidr, None, 10, 256, 'fd00::/48', None, None,
                 None]
         self.assertTrue(manager.create_networks(*args))
+
+
+class TestFloatingIPManager(network_manager.FloatingIP,
+        network_manager.NetworkManager):
+    """Dummy manager that implements FloatingIP"""
+
+
+class FloatingIPTestCase(test.TestCase):
+    """Tests nova.network.manager.FloatingIP"""
+    def setUp(self):
+        super(FloatingIPTestCase, self).setUp()
+        self.network = TestFloatingIPManager()
+        self.network.db = db
+        self.project_id = 'testproject'
+        self.context = context.RequestContext('testuser', self.project_id,
+            is_admin=False)
+
+    def test_double_deallocation(self):
+        instance_ref = db.api.instance_create(self.context,
+                {"project_id": self.project_id})
+        # Run it twice to make it fault if it does not handle
+        # instances without fixed networks
+        # If this fails in either, it does not handle having no addresses
+        self.network.deallocate_for_instance(self.context,
+                instance_id=instance_ref['id'])
+        self.network.deallocate_for_instance(self.context,
+                instance_id=instance_ref['id'])
-- 
1.7.6.5

