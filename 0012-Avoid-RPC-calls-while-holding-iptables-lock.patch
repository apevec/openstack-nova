From 1d4fc2640221d0f8f084aaf882a896c0bbd8ba4b Mon Sep 17 00:00:00 2001
From: Michael Still <mikal@stillhq.com>
Date: Thu, 11 Oct 2012 15:46:11 +1100
Subject: [PATCH] Avoid RPC calls while holding iptables lock.

This exhibitied itself as very slow instance starts on a Canonical
test cluster. This was because do_referesh_security_group_rules()
was making rpc calls while holding the iptables lock. This refactor
avoids that while making no functional changes (I hope).

Fixes bug: 1062314
Change-Id: I36f805bd72f7bd06082cfe96c58d637203bcffb7
Cherry-picked: ba585524e32965697c1a44c8fd743dea060bb1af
Conflicts:
	nova/virt/firewall.py
---
 nova/tests/test_libvirt.py |   14 +++++++++++++-
 nova/virt/firewall.py      |   20 ++++++++++++++------
 2 files changed, 27 insertions(+), 7 deletions(-)

diff --git a/nova/tests/test_libvirt.py b/nova/tests/test_libvirt.py
index bd13e0a..4fbb34a 100644
--- a/nova/tests/test_libvirt.py
+++ b/nova/tests/test_libvirt.py
@@ -1856,11 +1856,23 @@ class IptablesFirewallTestCase(test.TestCase):
     def test_do_refresh_security_group_rules(self):
         instance_ref = self._create_instance_ref()
         self.mox.StubOutWithMock(self.fw,
+                                 'instance_rules')
+        self.mox.StubOutWithMock(self.fw,
                                  'add_filters_for_instance',
                                  use_mock_anything=True)
+
+        self.fw.instance_rules(instance_ref,
+                               mox.IgnoreArg()).AndReturn((None, None))
+        self.fw.add_filters_for_instance(instance_ref, mox.IgnoreArg(),
+                                         mox.IgnoreArg())
+        self.fw.instance_rules(instance_ref,
+                               mox.IgnoreArg()).AndReturn((None, None))
+        self.fw.add_filters_for_instance(instance_ref, mox.IgnoreArg(),
+                                         mox.IgnoreArg())
+        self.mox.ReplayAll()
+
         self.fw.prepare_instance_filter(instance_ref, mox.IgnoreArg())
         self.fw.instances[instance_ref['id']] = instance_ref
-        self.mox.ReplayAll()
         self.fw.do_refresh_security_group_rules("fake")
 
     @test.skip_if(missing_libvirt(), "Test requires libvirt")
diff --git a/nova/virt/firewall.py b/nova/virt/firewall.py
index f0f1594..e9b177e 100644
--- a/nova/virt/firewall.py
+++ b/nova/virt/firewall.py
@@ -133,7 +133,8 @@ class IptablesFirewallDriver(FirewallDriver):
     def prepare_instance_filter(self, instance, network_info):
         self.instances[instance['id']] = instance
         self.network_infos[instance['id']] = network_info
-        self.add_filters_for_instance(instance)
+        ipv4_rules, ipv6_rules = self.instance_rules(instance, network_info)
+        self.add_filters_for_instance(instance, ipv4_rules, ipv6_rules)
         LOG.debug(_('Filters added to instance %s'), instance['uuid'])
         self.refresh_provider_fw_rules()
         LOG.debug(_('Provider Firewall Rules refreshed'))
@@ -166,7 +167,8 @@ class IptablesFirewallDriver(FirewallDriver):
             for rule in ipv6_rules:
                 self.iptables.ipv6['filter'].add_rule(chain_name, rule)
 
-    def add_filters_for_instance(self, instance):
+    def add_filters_for_instance(self, instance, inst_ipv4_rules,
+                                 inst_ipv6_rules):
         network_info = self.network_infos[instance['id']]
         chain_name = self._instance_chain_name(instance)
         if FLAGS.use_ipv6:
@@ -175,8 +177,7 @@ class IptablesFirewallDriver(FirewallDriver):
         ipv4_rules, ipv6_rules = self._filters_for_instance(chain_name,
                                                             network_info)
         self._add_filters('local', ipv4_rules, ipv6_rules)
-        ipv4_rules, ipv6_rules = self.instance_rules(instance, network_info)
-        self._add_filters(chain_name, ipv4_rules, ipv6_rules)
+        self._add_filters(chain_name, inst_ipv4_rules, inst_ipv6_rules)
 
     def remove_filters_for_instance(self, instance):
         chain_name = self._instance_chain_name(instance)
@@ -361,10 +362,17 @@ class IptablesFirewallDriver(FirewallDriver):
         self.iptables.apply()
 
     @utils.synchronized('iptables', external=True)
+    def _inner_do_refresh_rules(self, instance, ipv4_rules,
+                                               ipv6_rules):
+        self.remove_filters_for_instance(instance)
+        self.add_filters_for_instance(instance, ipv4_rules, ipv6_rules)
+
     def do_refresh_security_group_rules(self, security_group):
         for instance in self.instances.values():
-            self.remove_filters_for_instance(instance)
-            self.add_filters_for_instance(instance)
+            network_info = self.network_infos[instance['id']]
+            ipv4_rules, ipv6_rules = self.instance_rules(instance,
+                                                         network_info)
+            self._inner_do_refresh_rules(instance, ipv4_rules, ipv6_rules)
 
     def refresh_provider_fw_rules(self):
         """See :class:`FirewallDriver` docs."""
