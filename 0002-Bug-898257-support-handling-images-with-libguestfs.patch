From 82436c3605de262de095790b2e7670e07f2253a3 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?P=C3=A1draig=20Brady?= <P@draigBrady.com>
Date: Wed, 30 Nov 2011 17:00:17 +0000
Subject: [PATCH 2/2] Bug#898257 support handling images with libguestfs

http://libguestfs.org/ provides both utilities and libraries
to manipulate image files containing various operating systems.
It supports various image file formats and so will expand
the formats and guest types supported by openstack.
It does have extra overhead in that it starts a VM to
access the image. This has both advantages and disadvantages.
Also qemu-nbd is not supported on some systems like RHEL 6.

* nova/virt/disk.py (img_handlers): Add guestfs to the default list
of access methods to try, to act as a fallback.
(_guestfsMnt): A new mixin class to provide the access method.
Note we use the guestmount utility, as a non root user,
so the user will need the ability to use fusermount, which
is often provided by being a member of the 'fuser' group.
In future we might use the guestfs python module to give
greater granularity of control over the image.

Change-Id: I2e22c9d149fff7a73cd8cebaa280d68d3fb9096c
---
 nova/virt/disk.py |   42 ++++++++++++++++++++++++++++++++++++++++--
 1 files changed, 40 insertions(+), 2 deletions(-)

diff --git a/nova/virt/disk.py b/nova/virt/disk.py
index 0d6e65f..7ea2125 100644
--- a/nova/virt/disk.py
+++ b/nova/virt/disk.py
@@ -51,7 +51,7 @@ flags.DEFINE_integer('timeout_nbd', 10,
                      'time to wait for a NBD device coming up')
 flags.DEFINE_integer('max_nbd_devices', 16,
                      'maximum number of possible nbd devices')
-flags.DEFINE_list('img_handlers', ['loop', 'nbd'],
+flags.DEFINE_list('img_handlers', ['loop', 'nbd', 'guestfs'],
                     'Order of methods used to mount disk images')
 
 
@@ -323,7 +323,45 @@ class _nbdMnt(_baseMnt):
         self.device = None
 
 
-class _DiskImage(_loopMnt, _nbdMnt):
+class _guestfsMnt(_baseMnt):
+    """libguestfs support for arbitrary images."""
+    mode = 'guestfs'
+
+    def map_dev(self):
+        self.mapped = True
+        return True
+
+    def unmap_dev(self):
+        self.mapped = False
+
+    def mnt_dev(self):
+        args = ('guestmount', '--rw', '-a', self.image)
+        if self.partition:
+            args += ('-m', '/dev/sda%d' % self.partition)
+        else:
+            args += ('-i',) # find the OS partition
+        args += (self.mount_dir,)
+        # root access is not required for guestfs, but the current
+        # user must be able to fusermount (by being part of the
+        # fuser group for example).
+        out, err = self.attempt(*args, discard_warnings=True)
+        if err:
+            self.error = _('Failed to mount filesystem: %s') % err
+            return False
+
+        self.mounted = True
+        return True
+
+    def unmnt_dev(self):
+        if not self.mounted:
+            return
+        # root users don't need a specific unmnt_dev
+        # but ordinary users do
+        utils.execute('fusermount', '-u', self.mount_dir)
+        self.mounted = False
+
+
+class _DiskImage(_loopMnt, _nbdMnt, _guestfsMnt):
     """Provide operations on a disk image file."""
 
     def __init__(self, image, partition=None, use_cow=False,
-- 
1.7.6.4

